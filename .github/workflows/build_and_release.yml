name: Build and Release

on:
  push:
    branches:
      - '**'  # Run on all branches
    tags:
      - 'v*.*.*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract version
        id: extract_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            VERSION=$(git rev-parse --short HEAD)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Update version.py
        run: echo "version_string=\"${{ env.VERSION }}\"" > version.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build the .exe
        run: pyinstaller --onefile screenbasher.py

      - name: Rename .exe with version
        run: mv dist/screenbasher.exe dist/screenbasher_${{ env.VERSION }}.exe

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: screenbasher
          path: dist/screenbasher_${{ env.VERSION }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: screenbasher

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/screenbasher_${{ github.ref_name }}.exe
          asset_name: screenbasher_${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream
